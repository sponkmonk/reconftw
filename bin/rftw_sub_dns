#!/bin/bash

# Default config path
CONFIG_PATH="${RECONFTW_CFG}"

# Check if the config file exists
if [[ -f "${CONFIG_PATH}" ]]; then
    source "${CONFIG_PATH}"
else
    echo "Error: reconftw.cfg not found at ${CONFIG_PATH}!"
    exit 1
fi

# Help menu
display_help() {
	echo "$(basename "$0") [OPTIONS]"
	echo "Options:"
	echo "  -f, --input-file      Specify the input file with a list of domains. (Required)"
	echo "  -o, --output-file     Specify the output file for saving results. (Optional)"
	echo "  -h, --help            Display this help and exit."
	echo
	echo "Ensure all required environment variables are set in reconftw.cfg"
}

# Default values for input and output files
INPUTFILE=""

# Parse input arguments
while [[ $# -gt 0 ]]; do
	case $1 in
	-f | --input-file)
		INPUTFILE="$2"
		shift
		;;
	-o | --output-file)
		OUTPUTFILE="$2"
		shift
		;;
	-h | --help)
		display_help
		exit 0
		;;
	*)
		echo "Unknown parameter passed: $1"
		display_help
		exit 1
		;;
	esac
	shift
done

# Input validation
if [[ -z "${INPUTFILE}" ]] || [[ ! -f "${INPUTFILE}" ]]; then
	echo "Error: Input file not provided or does not exist."
	display_help
	exit 1
fi
# Main logic (Original function content)
mkdir -p .tmp 2>/dev/null
if [[ ${AXIOM} != true ]]; then
	cat "${INPUTFILE}" | dnsx -r "${resolvers_trusted}" -a -aaaa -cname -ns -ptr -mx -soa -silent -retry 3 -json -o .tmp/subdomains_dnsregs.json &>/dev/null
	[[ -s ".tmp/subdomains_dnsregs.json" ]] && cat .tmp/subdomains_dnsregs.json | jq -r 'try .a[]' | sort -u | anew -q .tmp/subdomains_dns_a_records.txt
	[[ -s ".tmp/subdomains_dnsregs.json" ]] && cat .tmp/subdomains_dnsregs.json | jq -r 'try .a[]' | sort -u | hakip2host | cut -d' ' -f 3 | unfurl -u domains | sed -e 's/*\.//' -e 's/\.$//' -e '/\./!d' | grep ".$DOMAIN$" | anew -q .tmp/subdomains_dns.txt	
	[[ -s ".tmp/subdomains_dnsregs.json" ]] && cat .tmp/subdomains_dnsregs.json | jq -r 'try .a[], try .aaaa[], try .cname[], try .ns[], try .ptr[], try .mx[], try .soa[]' 2>/dev/null | grep ".$DOMAIN$" | anew -q .tmp/subdomains_dns.txt
	[[ -s ".tmp/subdomains_dnsregs.json" ]] && cat .tmp/subdomains_dnsregs.json | jq -r 'try .a[]' | sort -u | hakip2host | cut -d' ' -f 3 | unfurl -u domains | sed -e 's/*\.//' -e 's/\.$//' -e '/\./!d' | grep ".$DOMAIN$" | anew -q .tmp/subdomains_dns.txt
	[[ -s ".tmp/subdomains_dnsregs.json" ]] && cat .tmp/subdomains_dnsregs.json | jq -r 'try "\(.host) - \(.a[])"' 2>/dev/null | sort -u -k2 | anew -q .tmp/subdomains_ips.txt
	rftw_util_resolver_quick_local
	[[ -s ".tmp/subdomains_dns.txt" ]] && puredns resolve .tmp/subdomains_dns.txt -w "${OUTPUTFILE}" -r "${resolvers}" --resolvers-trusted "${resolvers_trusted}" -l "${PUREDNS_PUBLIC_LIMIT}" --rate-limit-trusted "${PUREDNS_TRUSTED_LIMIT}" --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" &>/dev/null
else
	axiom-scan "${INPUTFILE}" -m dnsx -retry 3 -a -aaaa -cname -ns -ptr -mx -soa -json -o .tmp/subdomains_dnsregs.json "${AXIOM_EXTRA_ARGS}" 2>/dev/null
	[[ -s ".tmp/subdomains_dnsregs.json" ]] && cat .tmp/subdomains_dnsregs.json | jq -r 'try .a[]' | sort -u | anew -q .tmp/subdomains_dns_a_records.txt
	[[ -s ".tmp/subdomains_dnsregs.json" ]] && cat .tmp/subdomains_dnsregs.json | jq -r 'try .a[]' | sort -u | hakip2host | cut -d' ' -f 3 | unfurl -u domains | sed -e 's/*\.//' -e 's/\.$//' -e '/\./!d' | grep ".${DOMAIN}$" | anew -q .tmp/subdomains_dns.txt
	[[ -s ".tmp/subdomains_dnsregs.json" ]] && cat .tmp/subdomains_dnsregs.json | jq -r 'try .a[], try .aaaa[], try .cname[], try .ns[], try .ptr[], try .mx[], try .soa[]' 2>/dev/null | grep ".$DOMAIN$" | anew -q .tmp/subdomains_dns.txt
	[[ -s ".tmp/subdomains_dnsregs.json" ]] && cat .tmp/subdomains_dnsregs.json | jq -r 'try "\(.host) - \(.a[])"' 2>/dev/null | sort -u -k2 | anew -q .tmp/subdomains_ips.txt
	rftw_util_resolver_quick_axiom
	[[ -s ".tmp/subdomains_dns.txt" ]] && axiom-scan .tmp/subdomains_dns.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" -o "${OUTPUTFILE}" "${AXIOM_EXTRA_ARGS}" 2>/dev/null
fi
