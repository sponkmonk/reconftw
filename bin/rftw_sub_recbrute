#!/bin/bash

# Default config path
CONFIG_PATH="${RECONFTW_CFG}"

# Check if the config file exists
if [[ -f "${CONFIG_PATH}" ]]; then
    source "${CONFIG_PATH}"
else
    echo "Error: reconftw.cfg not found at ${CONFIG_PATH}!"
    exit 1
fi

# Help menu
display_help() {
	echo "$(basename "$0") [Options]"
	echo
	echo "  -d, --domain            Target for subdomain enumeration (Required)"
	echo "  -f, --file              File containing domains for subdomain enumeration (Required)"
	echo "  -o, --output            Output file location"
	echo "  -h, --help              Display this help and exit"
	echo
	echo "Example: $0 -d example.com -l /path/to/log"
	exit 1
}

# Variables for input and output
output_file=""

# Parse input arguments
while [[ $# -gt 0 ]]; do
	case $1 in
	-d | --domain)
		DOMAIN="$2"
		shift
		;;
	-f | --file)
		DOMAIN_FILE="$2"
		shift
		;;
	-o | --output)
		output_file="$2"
		shift
		;;
	-h | --help) display_help ;;
	*)
		echo "Unknown parameter passed: $1"
		exit 1
		;;
	esac
	shift
done

# Input validation
if [[ -z ${DOMAIN_FILE} ]] || [[ -z ${DOMAIN} ]]; then
	display_help
	exit 1
fi

# Validate file
if [[ ! -f ${DOMAIN_FILE} ]] || [[ ! -r ${DOMAIN_FILE} ]]; then
	echo "Error: Specified file does not exist or is not readable."
	exit 1
fi

# Validate domain
rftw_util_validatedomain "${DOMAIN}" || exit 1 # Domain validation

# Main function
sub_recursive_brute() {
	mkdir -p .tmp 2>/dev/null
	if [[ $(cat ${DOMAIN_FILE} | wc -l) -le $DEEP_LIMIT ]]; then
		[[ ! -s ".tmp/subdomains_recurs_top.txt" ]] && dsieve -if ${DOMAIN_FILE} -f 3 -top $DEEP_RECURSIVE_PASSIVE >.tmp/subdomains_recurs_top.txt
		ripgen -d .tmp/subdomains_recurs_top.txt -w $subs_wordlist >.tmp/brute_recursive_wordlist.txt
		if [[ ! ${AXIOM} == true ]]; then
			rftw_util_resolver_quick_local
			[[ -s ".tmp/brute_recursive_wordlist.txt" ]] && puredns resolve .tmp/brute_recursive_wordlist.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -w .tmp/brute_recursive_result.txt
		else
			rftw_util_resolver_quick_axiom
			[[ -s ".tmp/brute_recursive_wordlist.txt" ]] && axiom-scan .tmp/brute_recursive_wordlist.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -o .tmp/brute_recursive_result.txt "${AXIOM_EXTRA_ARGS}"
		fi
		[[ -s ".tmp/brute_recursive_result.txt" ]] && cat .tmp/brute_recursive_result.txt | anew -q .tmp/brute_recursive.txt
		if [[ $PERMUTATIONS_OPTION == "gotator" ]]; then
			[[ -s ".tmp/brute_recursive.txt" ]] && gotator -sub .tmp/brute_recursive.txt -perm "${tools}"/permutations_list.txt $GOTATOR_FLAGS -silent | head -c "${PERMUTATIONS_LIMIT}" >.tmp/gotator1_recursive.txt
		else
			[[ -s ".tmp/brute_recursive.txt" ]] && ripgen -d .tmp/brute_recursive.txt -w "${tools}"/permutations_list.txt | head -c "${PERMUTATIONS_LIMIT}" >.tmp/gotator1_recursive.txt
		fi
		if [[ ! ${AXIOM} == true ]]; then
			[[ -s ".tmp/gotator1_recursive.txt" ]] && puredns resolve .tmp/gotator1_recursive.txt -w .tmp/permute1_recursive.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT
		else
			[[ -s ".tmp/gotator1_recursive.txt" ]] && axiom-scan .tmp/gotator1_recursive.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -o .tmp/permute1_recursive.txt "${AXIOM_EXTRA_ARGS}"
		fi
		if [[ $PERMUTATIONS_OPTION == "gotator" ]]; then
			[[ -s ".tmp/permute1_recursive.txt" ]] && gotator -sub .tmp/permute1_recursive.txt -perm "${tools}"/permutations_list.txt $GOTATOR_FLAGS -silent | head -c "${PERMUTATIONS_LIMIT}" >.tmp/gotator2_recursive.txt
		else
			[[ -s ".tmp/permute1_recursive.txt" ]] && ripgen -d .tmp/permute1_recursive.txt -w "${tools}"/permutations_list.txt | head -c "${PERMUTATIONS_LIMIT}" >.tmp/gotator2_recursive.txt
		fi
		if [[ ! ${AXIOM} == true ]]; then
			[[ -s ".tmp/gotator2_recursive.txt" ]] && puredns resolve .tmp/gotator2_recursive.txt -w .tmp/permute2_recursive.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT 2>/dev/null
		else
			[[ -s ".tmp/gotator2_recursive.txt" ]] && axiom-scan .tmp/gotator2_recursive.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -o .tmp/permute2_recursive.txt "${AXIOM_EXTRA_ARGS}" 2>/dev/null
		fi
		cat .tmp/permute1_recursive.txt .tmp/permute2_recursive.txt | anew -q .tmp/permute_recursive.txt
	fi
	# Last validation
	cat .tmp/permute_recursive.txt .tmp/brute_recursive.txt | anew -q .tmp/brute_perm_recursive.txt
	if [[ ! ${AXIOM} == true ]]; then
		[[ -s ".tmp/brute_recursive.txt" ]] && puredns resolve .tmp/brute_perm_recursive.txt -w ${output_file} -r "${resolvers}" --resolvers-trusted "${resolvers_trusted}" -l "${PUREDNS_PUBLIC_LIMIT}" --rate-limit-trusted "${PUREDNS_TRUSTED_LIMIT}" --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" 2>/dev/null
	else
		[[ -s ".tmp/brute_recursive.txt" ]] && axiom-scan .tmp/brute_perm_recursive.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -o .${output_file} "${AXIOM_EXTRA_ARGS}" 2>/dev/null
	fi

}

# Call main function
sub_recursive_brute
