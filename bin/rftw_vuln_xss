#!/bin/bash

# Default config path
CONFIG_PATH="${RECONFTW_CFG}"

# Check if the config file exists
if [[ -f ${CONFIG_PATH} ]]; then
	source "${CONFIG_PATH}"
else
	echo "Error: reconftw.cfg not found at ${CONFIG_PATH}!"
	exit 1
fi

# Help menu
display_help() {
	echo "$(basename "$0") [Options]"
	echo
	echo "  -f, --file              File containing domains for web probing"
	echo "  -o, --output-dir        Output dir location"
	echo "  -h, --help              Display this help and exit"
	echo
	echo "Example: $0 -f input.txt -o output.txt"
	exit 1
}

# Parse input arguments
while [[ $# -gt 0 ]]; do
	deep_mode="False"
	case $1 in
	-f | --file)
		input_file="$2"
		shift
		;;
	-o | --output)
		output_dir="$2"
		shift
		;;
	-d | --deep)
		DEEP="True"
		shift
		;;
	-h | --help) display_help ;;
	*)
		echo "Unknown parameter passed: $1"
		exit 1
		;;
	esac
	shift
done

# Input validation
if [[ -z ${DOMAIN_FILE} ]]; then
	display_help
	exit 1
fi

# Validate file
if [[ ! -f ${DOMAIN_FILE} ]]; then
	echo "Error: Specified file does not exist or is not readable."
	exit 1
fi

mkdir -p .tmp 2>/dev/null

# Main xss function
function xss_analysis() {
	# Check if ${input_file} exists and process it
	[[ -s "${input_file}" ]] && cat ${input_file} | qsreplace FUZZ | sed '/FUZZ/!d' | Gxss -c 100 -p Xss | qsreplace FUZZ | sed '/FUZZ/!d' | anew -q .tmp/xss_reflected.txt
	# Check if AXIOM is true or not and perform the corresponding operations
	if [[ ${AXIOM} != true ]]; then
		if [[ $DEEP == true ]]; then
			if [[ -n $XSS_SERVER ]]; then
				[[ -s ".tmp/xss_reflected.txt" ]] && cat .tmp/xss_reflected.txt | dalfox pipe --silence --no-color --no-spinner --only-poc r --ignore-return 302,404,403 --skip-bav -b ${XSS_SERVER} -w $DALFOX_THREADS | anew -q ${output_dir}/xss.txt
			else
				printf "${yellow}\n No XSS_SERVER defined, blind xss skipped\n\n"
				[[ -s ".tmp/xss_reflected.txt" ]] && cat .tmp/xss_reflected.txt | dalfox pipe --silence --no-color --no-spinner --only-poc r --ignore-return 302,404,403 --skip-bav -w $DALFOX_THREADS | anew -q ${output_dir}/xss.txt
			fi
		else
			if [[ $(cat .tmp/xss_reflected.txt | wc -l) -le $DEEP_LIMIT ]]; then
				if [[ -n $XSS_SERVER ]]; then
					cat .tmp/xss_reflected.txt | dalfox pipe --silence --no-color --no-spinner --skip-bav --skip-mining-dom --skip-mining-dict --only-poc r --ignore-return 302,404,403 -b ${XSS_SERVER} -w $DALFOX_THREADS | anew -q ${output_dir}/xss.txt
				else
					printf "${yellow}\n No XSS_SERVER defined, blind xss skipped\n\n"
					cat .tmp/xss_reflected.txt | dalfox pipe --silence --no-color --no-spinner --skip-bav --skip-mining-dom --skip-mining-dict --only-poc r --ignore-return 302,404,403 -w $DALFOX_THREADS | anew -q ${output_dir}/xss.txt
				fi
			else
				printf "${bred} Skipping XSS: Too many URLs to test, try with --deep flag${reset}\n"
			fi
		fi
	else
		if [[ $DEEP == true ]]; then
			if [[ -n $XSS_SERVER ]]; then
				[[ -s ".tmp/xss_reflected.txt" ]] && axiom-scan .tmp/xss_reflected.txt -m dalfox --skip-bav -b ${XSS_SERVER} -w $DALFOX_THREADS -o ${output_dir}/xss.txt "${AXIOM_EXTRA_ARGS}" 2>/dev/null
			else
				printf "${yellow}\n No XSS_SERVER defined, blind xss skipped\n\n"
				[[ -s ".tmp/xss_reflected.txt" ]] && axiom-scan .tmp/xss_reflected.txt -m dalfox --skip-bav -w $DALFOX_THREADS -o ${output_dir}/xss.txt "${AXIOM_EXTRA_ARGS}" 2>/dev/null
			fi
		else
			if [[ $(cat .tmp/xss_reflected.txt | wc -l) -le $DEEP_LIMIT ]]; then
				if [[ -n $XSS_SERVER ]]; then
					axiom-scan .tmp/xss_reflected.txt -m dalfox --skip-bav --skip-grepping --skip-mining-all --skip-mining-dict -b ${XSS_SERVER} -w $DALFOX_THREADS -o ${output_dir}/xss.txt "${AXIOM_EXTRA_ARGS}" 2>/dev/null
				else
					printf "${yellow}\n No XSS_SERVER defined, blind xss skipped\n\n"
					axiom-scan .tmp/xss_reflected.txt -m dalfox --skip-bav --skip-grepping --skip-mining-all --skip-mining-dict -w $DALFOX_THREADS -o ${output_dir}/xss.txt "${AXIOM_EXTRA_ARGS}" 2>/dev/null
				fi
			else
				printf "${bred} Skipping XSS: Too many URLs to test, try with --deep flag${reset}\n"
			fi
		fi
	fi
}

xss_analysis
